openapi: 3.0.3

info:
  title: Agronom Bot Internal API
  version: 1.7.0
  description: |
    Telegram-бот «Карманный агроном» — API v1.4.0.
    Fixes: +signature, +UNAUTHORIZED, +monthly limits, +X-API-Ver usage, +multipart required, clarified dosage units.
  contact:
    name: Ivan Gromov
    url: https://github.com/agronom-bot
    email: i.gromov@agrostore.ru

servers:
  - url: https://api.agronom.local
    description: Production
  - url: https://staging.agronom.local
    description: Staging

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    HmacAuth:
      type: apiKey
      in: header
      name: X-Sign

  parameters:
    ApiVersionHeader:
      name: X-API-Ver
      in: header
      required: true
      schema:
        type: string
        enum: [v1]

  schemas:
    DiagnoseRequestMultipart:
      type: object
      required: [image]
      properties:
        image:
          type: string
          format: binary
        prompt_id:
          type: string
          enum: [v1]

    DiagnoseRequestBase64:
      type: object
      required: [image_base64, prompt_id]
      properties:
        image_base64:
          type: string
          description: Base64-JPEG/PNG ≤ 2 MB
        prompt_id:
          type: string
          enum: [v1]

    DiagnoseResponse:
      type: object
      required: [crop, disease, confidence]
      properties:
        crop:
          type: string
          example: apple
        disease:
          type: string
          example: powdery_mildew
        confidence:
          type: number
          format: float
          example: 0.87
        protocol_status:
          type: string
          example: "Бета"
        protocol:
          $ref: '#/components/schemas/ProtocolResponse'

    ProtocolResponse:
      type: object
      required: [id, product, dosage_value, dosage_unit, phi]
      properties:
        id:
          type: integer
          example: 1
        product:
          type: string
          example: Скор 250 ЭК
        dosage_value:
          type: number
          example: 2
        dosage_unit:
          type: string
          enum: [ml_10l, g_per_l]
          example: ml_10l
        phi:
          type: integer
          example: 30

    PhotoItem:
      allOf:
        - $ref: '#/components/schemas/DiagnoseResponse'
        - type: object
          required: [id, ts]
          properties:
            id:
              type: integer
              example: 42
            ts:
              type: string
              format: date-time
              example: "2025-07-20T12:34:56Z"

    ListPhotosResponse:
      type: object
      required: [items]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PhotoItem'
        next_cursor:
          type: string
          nullable: true
          description: Передайте значение в ?cursor=… для следующей страницы

    PaymentWebhook:
      type: object
      required: [external_id, status, paid_at, signature]
      properties:
        external_id:
          type: string
        status:
          type: string
          enum: [success, fail, cancel, bank_error]
        paid_at:
          type: string
          format: date-time
        signature:
          type: string
          description: HMAC-SHA256 of payload

    PaymentCreateRequest:
      type: object
      required: [user_id, plan]
      properties:
        user_id:
          type: integer
        plan:
          type: string
          example: pro
        months:
          type: integer
          default: 1

    PaymentStatusResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, success, fail, cancel, bank_error]
        pro_expires_at:
          type: string
          format: date-time
          nullable: true

    PhotoStatusResponse:
      type: object
      required: [status, updated_at]
      properties:
        status:
          type: string
          enum: [pending, ok, retrying, failed]
        updated_at:
          type: string
          format: date-time
        crop:
          type: string
        disease:
          type: string
        protocol:
          $ref: '#/components/schemas/ProtocolResponse'

    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          enum:
            [NO_LEAF, LIMIT_EXCEEDED, GPT_TIMEOUT, BAD_REQUEST, UNAUTHORIZED]
        message:
          type: string
    LimitReached:
      type: object
      required: [error, limit]
      properties:
        error:
          type: string
          example: limit_reached
        limit:
          type: integer
          example: 5

paths:
  /v1/ai/diagnose:
    post:
      summary: Diagnose plant disease
      operationId: diagnosePlant
      description: |
        Upload a leaf photo and get back the predicted crop,
        disease and confidence score. Supports multipart uploads
        via `image` field or JSON body with `image_base64`.
      tags: [diagnose]
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DiagnoseRequestMultipart'
          application/json:
            schema:
              $ref: '#/components/schemas/DiagnoseRequestBase64'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnoseResponse'
        '400':
          description: Bad image / bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '402':
          description: Free quota exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitReached'
        '502':
          description: GPT timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-rateLimit:
        limit: 30
        window: second

  /v1/photos:
    get:
      summary: List user’s photos (history)
      operationId: listPhotos
      description: List previously uploaded photos with pagination.
      tags: [photos]
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
        - name: cursor
          in: query
          schema:
            type: string
          description: Отдаётся в ответе как `next_cursor`
      responses:
        '200':
          description: Paginated list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPhotosResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/photos/{photo_id}:
    get:
      summary: Get photo status
      operationId: getPhotoStatus
      tags: [photos]
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
        - in: path
          name: photo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Photo details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found

  /v1/limits:
    get:
      summary: Возвращает текущие лимиты пользователя
      operationId: getUserLimits
      description: Retrieve current monthly usage limits for the authenticated user.
      tags: [limits]
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
      responses:
        '200':
          description: Текущие лимиты
          content:
            application/json:
              schema:
                type: object
                required: [limit_monthly_free, used_this_month]
                properties:
                  limit_monthly_free:
                    type: integer
                    example: 5
                  used_this_month:
                    type: integer
                    example: 3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/payments/create:
    post:
      summary: Create SBP payment
      operationId: createPayment
      tags: [payments]
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreateRequest'
      responses:
        '200':
          description: Payment link
          content:
            application/json:
              schema:
                type: object
                required: [payment_id, url]
                properties:
                  payment_id:
                    type: string
                    example: 123e4567e89
                  url:
                    type: string
                    example: https://sbp.example/pay
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/payments/{payment_id}:
    get:
      summary: Payment status
      operationId: getPaymentStatus
      tags: [payments]
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
        - in: path
          name: payment_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found

  /v1/payments/sbp/webhook:
    post:
      summary: SBP payment webhook
      operationId: handleSbpWebhook
      description: Process SBP payment callback and update payment status.
      tags: [payments]
      security:
        - HmacAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhook'
      responses:
        '200':
          description: Accepted

  /v1/partner/orders:
    post:
      summary: Order deep-link callback (AgroStore)
      operationId: partnerOrderCallback
      description: Receive deep-link order info from partner AgroStore.
      tags: [partner]
      security:
        - HmacAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [order_id, user_tg_id, protocol_id, price_kopeks, signature]
              properties:
                order_id:
                  type: string
                user_tg_id:
                  type: integer
                protocol_id:
                  type: integer
                price_kopeks:
                  type: integer
                signature:
                  type: string
                  description: HMAC-SHA256 по телу запроса
      responses:
        '202':
          description: Queued
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: diagnose
    description: Disease recognition
  - name: photos
    description: Photo history
  - name: payments
    description: SBP integration
  - name: limits
    description: User usage limits
  - name: partner
    description: External partner callbacks



